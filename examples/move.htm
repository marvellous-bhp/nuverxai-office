<!DOCTYPE html>
<html lang="en">
<head>
    <title>three.js webgl - 360 Image with Direction Arrow</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <link type="text/css" rel="stylesheet" href="main.css">
    <style>
        body { margin: 0; overflow: hidden; }
        canvas { display: block; }
        .arrow-btn {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            background: rgba(0, 0, 0, 0.5);
            border: none;
            color: white;
            font-size: 24px;
            padding: 10px;
            cursor: pointer;
            z-index: 1000;
        }
        #left-arrow {
            left: 10px;
        }
        #right-arrow {
            right: 10px;
        }
        #direction-arrow {
            position: absolute;
            top: 50px;
            left: 50%;
            transform: translateX(-50%);
            width: 50px;
            height: 50px;
            background: url('textures/arrow.png') no-repeat center center;
            background-size: contain;
            z-index: 1000;
        }
    </style>
</head>
<body>
    <div id="info">
        <a href="https://threejs.org" target="_blank" rel="noopener">three.js</a> webgl - 360 Image with Direction Arrow
    </div>
    <!-- <button id="left-arrow" class="arrow-btn">&#9664;</button>
    <button id="right-arrow" class="arrow-btn">&#9654;</button> -->
    <div id="direction-arrow"></div>
    <!-- <div id="direction-arrow"></div> -->

    <script type="importmap">
        {
            "imports": {
                "three": "../build/three.module.js",
                "three/addons/": "./jsm/"
            }
        }
    </script>

    <script type="module">
        
        import * as THREE from 'three';
        import { GUI } from "three/addons/libs/lil-gui.module.min.js";
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

        
        let camera, scene, renderer, controls;
        let currentPanorama;
        const panoramas = [
            'textures/drabri.jpg',
            'textures/bienst.jpg',
            'textures/dau_st.jpg',
            'textures/sontra.jpg',
            'textures/wayinST.jpg',
            'textures/seaST2.jpg',
            'textures/viewsontra.jpg',
        ];

        let currentPanoramaIndex = 0;
        
        const params = {
            envMap: "HDR JPG",
            roughness: 0.0,
            metalness: 1.0,
            exposure: 0.8,
            debug: false,
        };
        
        function init() {
            scene = new THREE.Scene();
            // Renderer
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);
            
            // Scene
            
            // Camera
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);
            camera.position.set(0, 0, 0.1);
            
            // Controls
            controls = new OrbitControls(camera, renderer.domElement);
            controls.enableZoom = true;  // Enable zooming
            controls.zoomSpeed = 1.2;    // Adjust zoom speed (default is 1)
            
            // Load initial panorama
            loadPanorama(panoramas[currentPanoramaIndex]);
            
            // Event listeners for switching panoramas
            document.getElementById('direction-arrow').addEventListener('click', () => switchPanorama(-1));
            // document.getElementById('left-arrow').addEventListener('click', () => switchPanorama(-1));
            // document.getElementById('right-arrow').addEventListener('click', () => switchPanorama(1));
            
            // Resize listener
            window.addEventListener('resize', onWindowResize, false);
        }
        
        function loadPanorama(url) {
            if (currentPanorama) {
                scene.remove(currentPanorama);
            }

            const textureLoader = new THREE.TextureLoader();
            textureLoader.load(url, function (texture) {
                texture.mapping = THREE.EquirectangularReflectionMapping;
                
                // Create sphere geometry
                const geometry = new THREE.SphereGeometry(500, 60, 40);
                geometry.scale(-1, 1, 1);
                
                // Create material
                const material = new THREE.MeshBasicMaterial({ map: texture });
                
                // Create mesh and add to scene
                currentPanorama = new THREE.Mesh(geometry, material);
                scene.add(currentPanorama);
            });
        }

        
        const gui = new GUI();
        gui
            .add(params, "envMap", Object.keys(panoramas))
            .onChange(function (value) {
            loadPanorama(panoramas[value]);
            });
        gui.add(params, "exposure", 0, 2, 0.01).onChange(function (value) {
            renderer.toneMappingExposure = value;
        });
        gui.open();
        init();
        animate();
        // init();

        function switchPanorama(direction) {
            currentPanoramaIndex = (currentPanoramaIndex + direction + panoramas.length) % panoramas.length;
            loadPanorama(panoramas[currentPanoramaIndex]);
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            updateDirectionArrow();
            renderer.render(scene, camera);
        }

        function updateDirectionArrow() {
            const directionArrow = document.getElementById('direction-arrow');
            const vector = new THREE.Vector3(0, 0, -1);
            vector.applyQuaternion(camera.quaternion);
            const angle = Math.atan2(vector.x, vector.z);
            directionArrow.style.transform = `translateX(-50%) rotate(${angle}rad)`;
        }
    </script>
</body>
</html>
